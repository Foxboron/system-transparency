# System Transparency build configuration.

# This file is sourced by other shell scripts, possibly run by /bin/sh
# (which might not be bash, nor dash).

##############################################################################
# Installation
#
# Following configuration is used during the installation of the tools.
##############################################################################

# Since u-root does not support go modules yet and by default the insatllation
# uses code from the master branch, ST_UROOT_DEV_BRANCH is checked out after 
# downloading source code and before installation. 
ST_UROOT_DEV_BRANCH=stboot


##############################################################################
# STBoot Data
#
# Following configuration is used in various files of the 
# STBoot data partition.
##############################################################################

# ST_PROVISIONING_SERVER_URL ends up in stboot/data/provisioning-servers.json
# which determines where OS packages are being fetched from. 
# TODO: url array.
ST_PROVISIONING_SERVER_URL=

# The following settings goes into network.json file on the data partition
# and are used for the network setup of the host. DNS setting is optional.
# This are default QEMU static network settings:
ST_HOST_IP="10.0.2.15/24"
ST_HOST_GATEWAY="10.0.2.2/24"
ST_HOST_DNS=""


##############################################################################
# STBoot Bootloader - common
#
# Following configuration is used during the creation linuxboot kernel and 
# initramfs. The stboot bootloader and security_configuration.json are part 
# of this initramfs.
##############################################################################

# ST_LINUXBOOT_CMDLINE controlls the kernel cmdline of the linuxboot kernel.
# Flags to stboot can be passed via uroot.uinitargs here as well.
ST_LINUXBOOT_CMDLINE="console=ttyS0,115200 uroot.uinitargs='-debug'"

# ST_LINUXBOOT_VARIANT determines the content of the initramfs. Possible values
# are: minimal, debug and full.
#
# minimal: The only executables included in the initramss are its init routine
# and the stboot binary.
#
# debug: in addition to minimal it includes a shell(elvish), the cpud command
# from the u-root repositore for debugging, a elvish script to bring up
# network, keys used with cpud and a elvish script to launch a remote debugging
# session via cpud.
#
# full: in addition to debug all core utilities of u-root.
ST_LINUXBOOT_VARIANT=minimal

# ST_ROOTCERT_FINGERPRINT_FILE must contain the fingerprint of the root
# certificate of the signing keys.
ST_ROOTCERT_FINGERPRINT_FILE="keys/signing_keys/rootcert.fingerprint"

# ST_NUM_SIGNATURES defines the minimum number of signatures that must be valid
# in order to boot the operation system.
ST_NUM_SIGNATURES=3

# ST_BOOTMETHOD controlls wether the OS package is loaded from the network
# or from local storage
#ST_BOOTMETHOD=NetworkStatic
#ST_BOOTMETHOD=NetworkDHCP
ST_BOOTMETHOD=LocalStorage


##############################################################################
# STBoot Bootloader - MBR bootloader installation
#
# Following configuration is used while creating the disk image for 
# mixed firmware systems.
##############################################################################

# ST_MBR_BOOTLOADER_KERNEL_VERSION defines linux kernel version of 
# the LinuxBoot distribution
ST_MBR_BOOTLOADER_KERNEL_VERSION=4.19.6

# ST_MBR_BOOTLOADER_KERNEL_CONFIG is the linux kernel defconfig
# loaded before the kernel is beeing built.
ST_MBR_BOOTLOADER_KERNEL_CONFIG="stboot-installation/mbr-bootloader/x86_64_x11ssh_qemu_linuxboot.defconfig"


##############################################################################
# STBoot Bootloader - EFI executable installation
#
# Following configuration is used while creating the disk image for 
# UEFI firmware systems.
##############################################################################

# ST_EFI_EXECUTABLE_EFISTUB_KERNEL_VERSION defines linux kernel version of 
# the LinuxBoot distribution
ST_EFI_EXECUTABLE_EFISTUB_KERNEL_VERSION=5.4.45

# ST_EFI_EXECUTABLE_EFISTUB_KERNEL_CONFIG is the linux kernel defconfig
# loaded before the kernel is beeing built.
ST_EFI_EXECUTABLE_EFISTUB_KERNEL_CONFIG="stboot-installation/efi-executable/x86_64_x11ssh_qemu_efistub.defconfig"


##############################################################################
# STBoot OS packages - General
#
# Following configuration is used while creating the OS package with the final 
# operating system.
##############################################################################

# ST_OS_PKG_SIGNING_ROOT is the root certificate of the certificates
# used to sign the OS package.
ST_OS_PKG_SIGNING_ROOT="keys/signing_keys/root.cert"

# ST_OS_PKG_TBOOT is the path to the tboot kernel to be used with the OS package
ST_OS_PKG_TBOOT="operating-system/tboot.gz"

# ST_OS_PKG_TBOOT_ARGS is the tboot kernel's command line
ST_OS_PKG_TBOOT_ARGS=""

# ST_OS_PKG_ACM is the path to an authenticated code module (ACM) or to a directory containing
# multiple ACMs. All ACMs will be present in the OS package and tboot will pick the right one for the host.
ST_OS_PKG_ACM="cache/ACMs/"

# ST_OS_PKG_ALLOW_NON_TXT controlls if the OS package schould be boot with a fallback
# configuration without tboot, when txt is not supported by the host machine.
ST_OS_PKG_ALLOW_NON_TXT=y

# ST_OS_PKG_OUT names the output directory of the created OS package.
ST_OS_PKG_OUT="os-packages"


##############################################################################
# STBoot OS packages - Debian Buster
#
# Following configuration is used while creating the OS package with the final 
# operating system.
##############################################################################

# ST_OS_PKG_LABEL is the name of the OS package
ST_OS_PKG_LABEL="System Transparency with Debian Buster"

# ST_OS_PKG_KERNEL path to the operating system's linux kernel
ST_OS_PKG_KERNEL="operating-system/debian/docker/out/debian-buster-amd64.vmlinuz"

# ST_OS_PKG_INITRAMFS path to the cpio archive. This must contain the complete OS.
ST_OS_PKG_INITRAMFS="operating-system/debian/docker/out/debian-buster-amd64.cpio.gz"

# ST_OS_PKG_CMDLINE is the kernel command line of the final
# operating system 
ST_OS_PKG_CMDLINE="console=tty0 console=ttyS0,115200n8 rw rdinit=/lib/systemd/systemd"


##############################################################################
# STBoot OS packages - Ubuntu 18.04 LTS (Bionic)
#
# Following configuration is used while creating the OS package with the final 
# operating system.
##############################################################################

# ST_OS_PKG_LABEL_UBUNTU18 is the name of the OS package
ST_OS_PKG_LABEL_UBUNTU18="System Transparency with Ubuntu 18.04 LTS (Bionic Beaver)"

# ST_OS_PKG_KERNEL_UBUNTU18 path to the operating system's linux kernel
ST_OS_PKG_KERNEL_UBUNTU18="operating-system/ubuntu18/docker/out/vmlinuz-4.15.0-20-generic"

# ST_OS_PKG_INITRAMFS_UBUNTU18 path to the cpio archive. This must contain the complete OS.
ST_OS_PKG_INITRAMFS_UBUNTU18="operating-system/ubuntu18/docker/out/linux-image-4.15.0-20.cpio.gz"

# ST_OS_PKG_CMDLINE_UBUNTU18 is the kernel command line of the final
# operating system 
ST_OS_PKG_CMDLINE_UBUNTU18="console=tty0 console=ttyS0 rw rdinit=/lib/systemd/systemd"


##############################################################################
# STBoot OS packages - Ubuntu 20.04 LTS (Focal Fossa)
#
# Following configuration is used while creating the OS package with the final 
# operating system.
##############################################################################

# ST_OS_PKG_LABEL_UBUNTU20 is the name of the OS package
ST_OS_PKG_LABEL_UBUNTU20="System Transparency with Ubuntu 20.04 LTS (Focal)"

# ST_OS_PKG_KERNEL_UBUNTU20 path to the operating system's linux kernel
ST_OS_PKG_KERNEL_UBUNTU20="operating-system/ubuntu18/docker/out/vmlinuz-5.4.0-26-generic"

# ST_OS_PKG_INITRAMFS_UBUNTU20 path to the cpio archive. This must contain the complete OS.
ST_OS_PKG_INITRAMFS_UBUNTU20="operating-system/ubuntu18/docker/out/linux-image-5.4.0-26-generic.cpio.gz"

# ST_OS_PKG_CMDLINE_UBUNTU20 is the kernel command line of the final
# operating system 
ST_OS_PKG_CMDLINE_UBUNTU20="console=tty0 console=ttyS0 rw rdinit=/lib/systemd/systemd"


##############################################################################
# Upload 
#
# The script upoad_os_package.sh uses this data during uplaod.
# Upload is done via scp, so make sure ssh key are setup right on the server.
##############################################################################

# SSH settings used in sripts/upload_os_package.sh
# to copy files to your provisioning server.
# ST_SSH_UPLOAD_SERVER is the domain of the provisioning server.
ST_SSH_UPLOAD_SERVER=

# ST_SSH_UPLOAD_USER is the username at the provisioning server.
ST_SSH_UPLOAD_USER=

# ST_SSH_UPLOAD_PATH is the web root of the provisioning server.
ST_SSH_UPLOAD_PATH=


##############################################################################
# Testing
##############################################################################

# ST_QEMU_MEM is the amount of RAM for qemu guests, in megabytes.
ST_QEMU_MEM=2048

